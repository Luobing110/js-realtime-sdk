{"version":3,"file":"live-query.min.js","sources":["../src/realtime.js","../src/live-query-client.js","../src/index.js"],"sourcesContent":["/* eslint-disable import/no-unresolved */\nimport {\n  Protocols as _Protocols,\n  Protocals,\n  Promise as _Promise,\n} from 'leancloud-realtime/core';\n\nconst Protocols = _Protocols || Protocals;\nif (!Protocols) {\n  throw new Error('LeanCloud Realtime SDK not installed');\n}\nexport { _Promise, Protocols };\n\nexport { EventEmitter } from 'leancloud-realtime/core';\n","import { Protocols, _Promise, EventEmitter } from './realtime';\n\nconst { CommandType, GenericCommand, AckCommand } = Protocols;\n\nconst warn = error => console.warn(error.message);\n\nexport default class LiveQueryClient extends EventEmitter {\n  constructor(appId, subscriptionId, connection) {\n    super();\n    this._appId = appId;\n    this.id = subscriptionId;\n    this._connection = connection;\n    this._eventemitter = new EventEmitter();\n    this._querys = new Set();\n  }\n\n  _send(cmd, ...args) {\n    return this._connection.send(\n      Object.assign(cmd, {\n        appId: this._appId,\n        installationId: this.id,\n        service: 1,\n      }),\n      ...args\n    );\n  }\n\n  _open() {\n    return this._send(\n      new GenericCommand({\n        cmd: CommandType.login,\n      })\n    );\n  }\n\n  close() {\n    const _ee = this._eventemitter;\n    _ee.emit('beforeclose');\n    return this._send(\n      new GenericCommand({\n        cmd: CommandType.logout,\n      })\n    ).then(() => _ee.emit('close'));\n  }\n\n  register(liveQuery) {\n    this._querys.add(liveQuery);\n  }\n\n  deregister(liveQuery) {\n    this._querys.delete(liveQuery);\n    setTimeout(() => {\n      if (!this._querys.size) this.close().catch(warn);\n    }, 0);\n  }\n\n  _dispatchCommand(command) {\n    if (command.cmd !== CommandType.data) {\n      this.emit('unhandledmessage', command);\n      return _Promise.resolve();\n    }\n    return this._dispatchDataCommand(command);\n  }\n\n  _dispatchDataCommand({ dataMessage: { ids, msg } }) {\n    this.emit(\n      'message',\n      msg.map(({ data }) => JSON.parse(data))\n    );\n    // send ack\n    const command = new GenericCommand({\n      cmd: CommandType.ack,\n      ackMessage: new AckCommand({\n        ids,\n      }),\n    });\n    return this._send(command, false).catch(warn);\n  }\n}\n","import { _Promise } from './realtime';\nimport LiveQueryClient from './live-query-client';\n\nconst finalize = callback => [\n  // eslint-disable-next-line no-sequences\n  value => (callback(), value),\n  error => {\n    callback();\n    throw error;\n  },\n];\n\nconst onRealtimeCreate = realtime => {\n  /* eslint-disable no-param-reassign */\n  realtime._liveQueryClients = {};\n  realtime.createLiveQueryClient = subscriptionId => {\n    if (realtime._liveQueryClients[subscriptionId] !== undefined) {\n      return _Promise.resolve(realtime._liveQueryClients[subscriptionId]);\n    }\n    const promise = realtime\n      ._open()\n      .then(connection => {\n        const client = new LiveQueryClient(\n          realtime._options.appId,\n          subscriptionId,\n          connection\n        );\n        connection.on('reconnect', () =>\n          client\n            ._open()\n            .then(\n              () => client.emit('reconnect'),\n              error => client.emit('reconnecterror', error)\n            )\n        );\n        client._eventemitter.on(\n          'beforeclose',\n          () => {\n            delete realtime._liveQueryClients[client.id];\n          },\n          realtime\n        );\n        client._eventemitter.on(\n          'close',\n          () => {\n            realtime._deregister(client);\n          },\n          realtime\n        );\n        return client._open().then(() => {\n          realtime._liveQueryClients[client.id] = client;\n          realtime._register(client);\n          return client;\n        });\n      })\n      .then(\n        ...finalize(() => {\n          if (realtime._deregisterPending) realtime._deregisterPending(promise);\n        })\n      );\n    realtime._liveQueryClients[subscriptionId] = promise;\n    if (realtime._registerPending) realtime._registerPending(promise);\n    return promise;\n  };\n  /* eslint-enable no-param-reassign */\n};\n\nconst beforeCommandDispatch = (command, realtime) => {\n  const isLiveQueryCommand = command.installationId && command.service === 1;\n  if (!isLiveQueryCommand) return true;\n  const targetClient = realtime._liveQueryClients[command.installationId];\n  if (targetClient) {\n    targetClient._dispatchCommand(command).catch(error => console.warn(error));\n  } else {\n    console.warn(\n      'Unexpected message received without any live client match: %O',\n      command\n    );\n  }\n  return false;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const LiveQueryPlugin = {\n  name: 'leancloud-realtime-plugin-live-query',\n  onRealtimeCreate,\n  beforeCommandDispatch,\n};\n"],"names":["Protocols","_Protocols","Protocals","Error","CommandType","GenericCommand","AckCommand","warn","error","console","message","LiveQueryClient","appId","subscriptionId","connection","_appId","id","_connection","_eventemitter","EventEmitter","_querys","Set","_send","cmd","args","send","Object","assign","this","installationId","service","_open","login","close","_ee","emit","logout","then","register","liveQuery","add","deregister","setTimeout","_this2","size","_dispatchCommand","command","data","_Promise","resolve","_dispatchDataCommand","dataMessage","ids","msg","map","JSON","parse","ack","ackMessage","LiveQueryPlugin","name","onRealtimeCreate","realtime","_liveQueryClients","createLiveQueryClient","undefined","callback","promise","client","_options","on","_deregister","_register","_deregisterPending","value","_registerPending","beforeCommandDispatch","targetClient"],"mappings":"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"}